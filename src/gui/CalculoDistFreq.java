/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import static gui.CalculoModa.verifExistencia;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tarcisio
 */
public class CalculoDistFreq extends javax.swing.JFrame {
    URL url = this.getClass().getResource("/img/X32.png");
    Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
    
    public void setTitulo(Image iconeTitulo) {
        this.setIconImage(iconeTitulo);
    }
    
    
    /**
     * Creates new form CalculoDistFreq
     */
    public CalculoDistFreq() {
        initComponents();
        setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaItens = new javax.swing.JTable();
        btAdicionar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btDuplicar = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btCalcular = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tabelaItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Itens"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaItens.setToolTipText("Tabela de itens");
        jScrollPane1.setViewportView(tabelaItens);

        btAdicionar.setMnemonic('a');
        btAdicionar.setText("Adicionar Item");
        btAdicionar.setToolTipText("Clique para adicionar um item à tabela ao lado!");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });

        btExcluir.setMnemonic('e');
        btExcluir.setText("Excluir Item");
        btExcluir.setToolTipText("Clique para excluir um item selecionado na tabela ao lado!");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btDuplicar.setMnemonic('d');
        btDuplicar.setText("Duplicar Item");
        btDuplicar.setToolTipText("Clique para duplicar um item selecionado na tabela!");
        btDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDuplicarActionPerformed(evt);
            }
        });

        btLimpar.setMnemonic('l');
        btLimpar.setText("Limpar Tabela");
        btLimpar.setToolTipText("Clique aqui para limpar a tabela de itens!");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btCalcular.setMnemonic('g');
        btCalcular.setText("Gerar Distribuição de Frequências");
        btCalcular.setToolTipText("Clique aqui para apresentar a tabela de distribuição de frequência dos itens da tabela!");
        btCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCalcular)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btAdicionar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btDuplicar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btLimpar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btAdicionar)
                .addGap(18, 18, 18)
                .addComponent(btExcluir)
                .addGap(18, 18, 18)
                .addComponent(btDuplicar)
                .addGap(18, 18, 18)
                .addComponent(btLimpar)
                .addGap(18, 18, 18)
                .addComponent(btCalcular)
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        String itemString = JOptionPane.showInputDialog(this, "Digite o item a ser adicionado:","Adicionar item",JOptionPane.QUESTION_MESSAGE);;
        boolean erroFormato = false;
        try{
            double item = Double.parseDouble(itemString);
            
            ArrayList<Double> itens = new ArrayList();
            DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();

            for(int i = 0; i<modelo.getRowCount();i++){
                itens.add(Double.valueOf(String.valueOf(modelo.getValueAt(i, 0))));
            }

            if(!(itemString==null)&&!itemString.isEmpty()){
                itens.add(item);
                modelo.setRowCount(itens.size());
                for(int i = 0; i<modelo.getRowCount();i++){
                    modelo.setValueAt(itens.get(i), i, 0);
                }
                tabelaItens.setModel(modelo);
            }else if(itemString==null){

            }
            else{
                JOptionPane.showMessageDialog(this, "Entre com um valor válido!", "Erro!", JOptionPane.ERROR_MESSAGE);
                tabelaItens.setModel(modelo);
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this, "Digite apenas números nesse campo! (Dica: utilize o '.' ao invés da ',' para representar decimais.","XtatistiK - Erro!", JOptionPane.ERROR_MESSAGE);
        }catch(NullPointerException npe){
        }
    }//GEN-LAST:event_btAdicionarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        int linhasSelecionadas = 0;
        int tamanhoTabela = modelo.getRowCount();
        for(int i = 0; i<tamanhoTabela; i++){
            if(tabelaItens.isRowSelected(i)){
                linhasSelecionadas++;
                modelo.removeRow(i);
                i--;
            }
        }

        if(linhasSelecionadas==0){
            JOptionPane.showMessageDialog(this, "Selecione um item a ser excluído!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }

        tabelaItens.setModel(modelo);
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDuplicarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        boolean erroNaoSelecionado = true;
        int linhaSelecionada = -1;

        for(int i = 0; i<modelo.getRowCount(); i++){
            if(tabelaItens.isRowSelected(i)){
                erroNaoSelecionado = false;
                linhaSelecionada = i;
                break;
            } else{
                erroNaoSelecionado = true;
            }
        }

        if(modelo.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Adicione itens à tabela para duplicá-los!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            if(erroNaoSelecionado == false){
                modelo.setRowCount(modelo.getRowCount()+1);
                modelo.setValueAt(modelo.getValueAt(linhaSelecionada,0) , modelo.getRowCount()-1 , 0);
            } else{
                JOptionPane.showMessageDialog(this, "Selecione um item para ser duplicado!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

        tabelaItens.setModel(modelo);
    }//GEN-LAST:event_btDuplicarActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        boolean confirmaLimpeza = false;

        if(modelo.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Tabela já está vazia!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            if(JOptionPane.showConfirmDialog(this, "Deseja REALMENTE limpar a tabela de itens?", "XtatistiK - Confirmar?",JOptionPane.YES_NO_OPTION)==0){
                modelo.setRowCount(0);
            }
        }
    }//GEN-LAST:event_btLimparActionPerformed

    private void btCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularActionPerformed
        if(tabelaItens.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Adicione pelo menos um item antes de calcular!", "Erro!", JOptionPane.ERROR_MESSAGE);
        }else{
            ArrayList<Double> valores = new ArrayList(); //arraylist com todos os valores da amostra
            int numClasses = 0; //conterá o número de classes a aparecer na tabela
            double amplitudeClasses = 0; //conterá o valor do cálculo da amplitude de classes
            DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
            
            for(int i = 0; i<modelo.getRowCount(); i++){
                valores.add(Double.valueOf(String.valueOf(modelo.getValueAt(i,0))));
            }
            
            //condicional que calcula o número de classes
                if(valores.size()<=25){
                    numClasses = 5;
                }else{
                    numClasses = (int) Math.sqrt(valores.size());
                }

                int []freqAbs = new int[numClasses];//guardará as frequências absolutas.

                double maior = valores.get(0);//maior valor da amostra
                double menor = valores.get(0);//menor valor da amostra

                //laço que verifica qual o maior e menor valores da amostra
                for(int i = 0; i<valores.size(); i++){
                    if(valores.get(i)>maior){
                        maior = valores.get(i);
                    } else if(valores.get(i)<menor){
                        menor = valores.get(i);
                    }
                }

            amplitudeClasses = ((maior - menor) / numClasses) * 1.1; //cálculo da amplitude

            double[] valoresIniciais = new double[numClasses];//conterá os valores iniciais das classes
            double[] valoresFinais = new double[numClasses];//conterá os valores finais das classes

            valoresIniciais[0] = formata(menor); //valor inicial da primeira classe é o menor valor do grupo
            valoresFinais[0] = formata(menor + amplitudeClasses);

            //laço que preenche os valores da tabela
            for (int i = 1; i < freqAbs.length; i++) {
                valoresIniciais[i] = valoresFinais[i - 1];
                valoresFinais[i] = formata(valoresIniciais[i] + amplitudeClasses);
            }

            //calcula a frequência absoluta para colocar na tabela
            for (int i = 0; i < valoresIniciais.length; i++) {
                for (int j = 0; j < valores.size(); j++) {
                    if (valores.get(j) >= valoresIniciais[i] && valores.get(j) < valoresFinais[i]) {
                        freqAbs[i]++;
                    }
                }
            }
            
            ArrayList<String> classes = new ArrayList();
            
            for(int i = 0; i<valoresIniciais.length; i++){
                classes.add("("+valoresIniciais[i]+") |---- ("+valoresFinais[i]+")");
            }
            
            ResultadoDistFreq rdf = new ResultadoDistFreq();
            rdf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            rdf.setLocationRelativeTo(null);
            rdf.preencherTabela(classes, freqAbs);
            rdf.setVisible(true);
        }
    }//GEN-LAST:event_btCalcularActionPerformed

    public static double formata(double item){
        String aux = String.format("%.2f", item); //"String.format" retorna um float, então, a função retorna um double.
        char []arrayChar = new char[aux.length()];
        
        arrayChar = aux.toCharArray();
        
        arrayChar[arrayChar.length-3] = '.';
        
        aux = String.valueOf(arrayChar);
        return Double.parseDouble(aux);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculoDistFreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculoDistFreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculoDistFreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculoDistFreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculoDistFreq().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btCalcular;
    private javax.swing.JButton btDuplicar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaItens;
    // End of variables declaration//GEN-END:variables
}
