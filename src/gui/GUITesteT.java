/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import funcoes.TesteT1;
import static funcoes.TesteT2.*;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jehymeson Gil
 */
public class GUITesteT extends javax.swing.JFrame {

    URL url = this.getClass().getResource("/img/X32.png");
    Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);

    public void setTitulo(Image iconeTitulo) {
        this.setIconImage(iconeTitulo);
    }

    /**
     * Creates new form GUITesteT2
     */
    public GUITesteT() {
        initComponents();
        setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tTesteT2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        bExcluir = new javax.swing.JButton();
        bLimparTabela = new javax.swing.JButton();
        bVerificarHipotese = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Verificação de Hipotese | T2");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tTesteT2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Amostra 01", "Amostra 02"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tTesteT2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Nova Linha");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bExcluir.setText("Excluir Linha");
        bExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExcluirActionPerformed(evt);
            }
        });

        bLimparTabela.setText("Limpar Tabela");
        bLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimparTabelaActionPerformed(evt);
            }
        });

        bVerificarHipotese.setText("Verificar Hipotese");
        bVerificarHipotese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerificarHipoteseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bLimparTabela)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                .addComponent(bVerificarHipotese)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(bExcluir)
                    .addComponent(bLimparTabela)
                    .addComponent(bVerificarHipotese))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel linha = (DefaultTableModel) tTesteT2.getModel();
        Double[] novaLinha = null;
        linha.addRow(novaLinha);
        tTesteT2.setModel(linha);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExcluirActionPerformed
        DefaultTableModel pegarDados = (DefaultTableModel) tTesteT2.getModel();
        int idLinha = tTesteT2.getSelectedRow();

        if (idLinha == -1) {
            JOptionPane.showMessageDialog(null, "Selecione a linha a ser removida.", "Atenção", 0);
        } else {
            pegarDados.removeRow(idLinha);
            tTesteT2.setModel(pegarDados);
        }
    }//GEN-LAST:event_bExcluirActionPerformed

    private void bLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimparTabelaActionPerformed
        DefaultTableModel limparTabela = (DefaultTableModel) tTesteT2.getModel();
        limparTabela.setRowCount(0);
        tTesteT2.setModel(limparTabela);
    }//GEN-LAST:event_bLimparTabelaActionPerformed

    private void bVerificarHipoteseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerificarHipoteseActionPerformed
        DefaultTableModel pegarDados = (DefaultTableModel) tTesteT2.getModel();
        int numDados = pegarDados.getRowCount();
        ArrayList<Double> dados1 = new ArrayList();
        ArrayList<Double> dados2 = new ArrayList();

        if (numDados == 0 || numDados < 3) {
            JOptionPane.showMessageDialog(null, "Insira novas linhas e adicione valores, \n"
                    + "assim poderemos calcular uma hipotese.", "Atenção", 0);
        } else {

            for (int i = 0; i < numDados; i++) {
                if (pegarDados.getValueAt(i, 0) != null) {
                    dados1.add((Double) pegarDados.getValueAt(i, 0));
                }
            }

            for (int i = 0; i < numDados; i++) {
                if (pegarDados.getValueAt(i, 1) != null) {
                    dados2.add((Double) pegarDados.getValueAt(i, 1));
                }
            }

            //Somatoria dos valores
            Double sum1 = somatoria(dados1);
            Double sum2 = somatoria(dados2);

            //Cálculo de Média
            Double media1 = media(dados1, sum1);
            Double media2 = media(dados2, sum2);

            //Cálculo das diferenças ao quadrado.
            ArrayList<Double> dif1 = diferencaQuadrada(dados1, media1);
            ArrayList<Double> dif2 = diferencaQuadrada(dados2, media2);

            Double somDif1 = somatoria(dif1);
            Double somDif2 = somatoria(dif2);

            Double variancia1 = variancia(somDif1, dados1.size());
            Double variancia2 = variancia(somDif2, dados2.size());

            if (this.getTitle().contains("T2")) {
                Double t = xtatistikTest(media1, media2, variancia1, variancia2, dados1, dados2);

                double nAsterisk = nAsterisk(media1, media2, variancia1, variancia2, dados1, dados2);

                String tTab = JOptionPane.showInputDialog(this, "Entre com o valor de T tabelado para n* = " + String.valueOf(nAsterisk), "Atenção", JOptionPane.OK_CANCEL_OPTION);

                try {
                    tTab = tTab.replace(",", ".");
                } catch (NullPointerException npe) {

                }

                int retorno = 3;

                try {
                    retorno = testHipotese(Double.parseDouble(tTab), t);
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(this, "Erro! Digite apenas números reais neste campo!", "Erro!", JOptionPane.ERROR_MESSAGE);
                } catch (NullPointerException npe) {

                }

                if (retorno == 1) {
                    JOptionPane.showMessageDialog(this, "Resultado: Aceita-se H0!\nNão há diferenças, estatisticamente falando, entre as amostras apresentadas!\nDados:\nVariância 1: " + variancia1 + " e Variância 2: " + variancia2 + "\nMédia 1: " + media1 + " e Média 2: " + media2 + "\nT calculado: " + t, "Resultado", JOptionPane.INFORMATION_MESSAGE);
                } else if (retorno == 0) {
                    JOptionPane.showMessageDialog(this, "Resultado: Rejeita-se H0!\nHá diferenças, estatisticamente falando, entre as amostras apresentadas!\nDados:\nVariância 1: " + variancia1 + " e Variância 2: " + variancia2 + "\nMédia 1: " + media1 + " e Média 2: " + media2 + "\nT calculado: " + t, "Resultado", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                Double t = TesteT1.xtatistikTest(media1, media2, variancia1, variancia2, dados1, dados2);
                String tTab = "";
                try {
                    tTab = JOptionPane.showInputDialog(this, "Entre com o valor de T tabelado: ", "Atenção", JOptionPane.OK_CANCEL_OPTION);
                    tTab = tTab.replace(",", ".");
                    int retorno = testHipotese(Double.parseDouble(tTab), t);
                    if(retorno==1){
                        JOptionPane.showMessageDialog(this, "Resultado: Aceita-se H0!\nNão há diferenças, estatisticamente falando, entre as amostras apresentadas!\nDados:\nVariância 1: " + variancia1 + " e Variância 2: " + variancia2 + "\nMédia 1: " + media1 + " e Média 2: " + media2 + "\nT calculado: " + t, "Resultado", JOptionPane.INFORMATION_MESSAGE);
                    } else if(retorno==0){
                        JOptionPane.showMessageDialog(this, "Resultado: Rejeita-se H0!\nHá diferenças, estatisticamente falando, entre as amostras apresentadas!\nDados:\nVariância 1: " + variancia1 + " e Variância 2: " + variancia2 + "\nMédia 1: " + media1 + " e Média 2: " + media2 + "\nT calculado: " + t, "Resultado", JOptionPane.INFORMATION_MESSAGE);
                    }
                }catch(NumberFormatException nfe){
                    JOptionPane.showMessageDialog(this, "Erro! Digite apenas números reais neste campo!", "Erro!", JOptionPane.ERROR_MESSAGE);
                } catch(NullPointerException npe){
                    
                }
            }
        }
    }//GEN-LAST:event_bVerificarHipoteseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUITesteT.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUITesteT.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUITesteT.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUITesteT.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUITesteT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExcluir;
    private javax.swing.JButton bLimparTabela;
    private javax.swing.JButton bVerificarHipotese;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tTesteT2;
    // End of variables declaration//GEN-END:variables
}
