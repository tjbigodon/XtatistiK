/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Tarcisio
 */
public class CalculoModa extends javax.swing.JFrame {

    //Variáveis setadas para utilização da imagem do sistema
    //Ateção: Não apague estas variáveis.
    URL url = this.getClass().getResource("/img/X32.png");
    Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
    
    /**
     * Método que define a imagen do incone para a janela.
     * @param iconeTitulo
     */
    public void setTitulo(Image iconeTitulo) {
        this.setIconImage(iconeTitulo);
    }
    
    /**
     * Creates new form GuiTesteTJ
     */
    public CalculoModa() {
        initComponents();
        setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaItens = new javax.swing.JTable();
        btCalcular = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btAdicionar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btDuplicar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XtatistiK - Moda");
        setFocusCycleRoot(false);
        setResizable(false);

        tabelaItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Itens"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaItens.setToolTipText("Tabela de itens");
        jScrollPane1.setViewportView(tabelaItens);

        btCalcular.setMnemonic('c');
        btCalcular.setText("Calcular Moda");
        btCalcular.setToolTipText("Clique aqui para calcular a moda dos itens da tabela!");
        btCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularActionPerformed(evt);
            }
        });

        btLimpar.setMnemonic('l');
        btLimpar.setText("Limpar Tabela");
        btLimpar.setToolTipText("Clique aqui para limpar a tabela de itens!");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btAdicionar.setMnemonic('a');
        btAdicionar.setText("Adicionar Item");
        btAdicionar.setToolTipText("Clique para adicionar um item à tabela ao lado.");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });

        btExcluir.setMnemonic('e');
        btExcluir.setText("Excluir Item");
        btExcluir.setToolTipText("Clique para excluir um item selecionado na tabela ao lado.");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btDuplicar.setMnemonic('d');
        btDuplicar.setText("Duplicar Item");
        btDuplicar.setToolTipText("Clique para duplicar um item selecionado na tabela.");
        btDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDuplicarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(btDuplicar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(btLimpar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btAdicionar)
                .addGap(18, 18, 18)
                .addComponent(btExcluir)
                .addGap(18, 18, 18)
                .addComponent(btDuplicar)
                .addGap(18, 18, 18)
                .addComponent(btLimpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE)
                .addComponent(btCalcular)
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularActionPerformed
        if(tabelaItens.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Adicione pelo menos um item antes de calcular!", "Erro!", JOptionPane.ERROR_MESSAGE);
        }else{
        ArrayList<String> itens = new ArrayList(); //arraylist com os itens da tabela
        ArrayList<String> itensDif = new ArrayList(); //arraylist contendo apenas itens diferentes
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel(); 
        String item;
        boolean amodal = true;
        
        for(int i = 0; i<modelo.getRowCount();i++){
            item = String.valueOf(modelo.getValueAt(i, 0));
            itens.add(item);
        }
        
        int moda = 0;
        int classifModa = 0;
        
         itensDif.add(itens.get(0)); //adiciona o primeiro item ao arraylist dos diferentes
         
         for(int i = 0; i<itens.size(); i++){ //laço que adiciona somente os valores únicos ao aux
            for(int j = 0; j<itens.size() ; j++){
                if(!itens.get(i).equals(itens.get(j))){
                    if(!verifExistencia(itensDif,itens.get(j))){
                        itensDif.add(itens.get(j));
                    }
                }
            }
            break;
        }
        
        int freqAcum[] = new int[itensDif.size()]; //vetor que pega a frequência acumulada
        
        
        for(int i = 0; i<itensDif.size(); i++){ 
            for(int j = 0; j<itens.size() ; j++){
                if(itensDif.get(i).equals(itens.get(j))){
                    freqAcum[i]++;
                }
            }
        }
        
        //laço que atribui qual frequência absoluta será a moda
        for(int j = 0; j<itensDif.size() ; j++){
            if(moda<freqAcum[j]){
                moda = freqAcum[j];
            }
        }
        
        for(int i = 0; i<itensDif.size(); i++){
            if(freqAcum[i]==1){
                amodal = true;
            }else{
                amodal = false;
                break;
            }
        }
        
        String resultado = new String("Moda: ["); //string que apresentará o resultado final
        
        if(amodal == false){
            
            for(int j = 0; j<itensDif.size() ; j++){
                if(moda==freqAcum[j]){
                    resultado = (resultado+itensDif.get(j));
                    classifModa++;
                    if(!(j+1==itensDif.size())){
                        resultado = (resultado+" / ");
                    }
                }
            }
            //condicional que deleta o final do resultado, pra ficar mais bonito
            if(resultado.endsWith("/ ")){
                char[] resultadoChar = new char[resultado.length()-3];
                resultado.getChars(0, resultado.length()-3, resultadoChar,0);

                resultado = String.valueOf(resultadoChar);
            }

            resultado = (resultado+"]");
        } else{
            resultado = (resultado+"]");
        }
         
        
        String tipoModa;
        switch(classifModa){
            case 0:
                tipoModa = ("Amodal!");
                break;
            case 1:
                tipoModa = ("Unimodal!");
                break;
            case 2:
                tipoModa = ("Bimodal!");
                break;
            default:
                if(amodal==true){
                    tipoModa = ("Amodal!");
                }else{
                    tipoModa = ("Multimodal!");
                }
                break;
        }
        
        ResultadoModa jr = new ResultadoModa();
        jr.preencherTabela(itensDif, freqAcum);
        jr.resultado(resultado, tipoModa);
        
        jr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jr.setLocationRelativeTo(this);
        jr.setVisible(true);
        }
        
    }//GEN-LAST:event_btCalcularActionPerformed

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        ArrayList<String> itens = new ArrayList();
        String item;
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        
        for(int i = 0; i<modelo.getRowCount();i++){
            item = String.valueOf(modelo.getValueAt(i, 0));
            itens.add(item);
        }
        
        item = JOptionPane.showInputDialog(this, "Digite o item a ser adicionado:","Adicionar item",JOptionPane.QUESTION_MESSAGE);
        
        if(!(item==null)&&!item.isEmpty()){
            itens.add(item);
            modelo.setRowCount(itens.size());
            for(int i = 0; i<modelo.getRowCount();i++){
                modelo.setValueAt(itens.get(i), i, 0);
            }
            tabelaItens.setModel(modelo);
        }else if(item==null){
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Entre com um valor válido!", "Erro!", JOptionPane.ERROR_MESSAGE);
            tabelaItens.setModel(modelo);
        }
    }//GEN-LAST:event_btAdicionarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        int linhasSelecionadas = 0;
        int tamanhoTabela = modelo.getRowCount();
        for(int i = 0; i<tamanhoTabela; i++){
            if(tabelaItens.isRowSelected(i)){
                linhasSelecionadas++;
                modelo.removeRow(i);
                i--;
            }
        }
        
        if(linhasSelecionadas==0){
            JOptionPane.showMessageDialog(this, "Selecione um item a ser excluído!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        tabelaItens.setModel(modelo);
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        boolean confirmaLimpeza = false;
        
        if(modelo.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Tabela já está vazia!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            if(JOptionPane.showConfirmDialog(this, "Deseja REALMENTE limpar a tabela de itens?", "XtatistiK - Confirmar?",JOptionPane.YES_NO_OPTION)==0){
                modelo.setRowCount(0);
            }
        }
    }//GEN-LAST:event_btLimparActionPerformed

    private void btDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDuplicarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel)tabelaItens.getModel();
        boolean erroNaoSelecionado = true;
        int linhaSelecionada = -1;
        
        
        for(int i = 0; i<modelo.getRowCount(); i++){
            if(tabelaItens.isRowSelected(i)){
                erroNaoSelecionado = false;
                linhaSelecionada = i;
                break;
            } else{
                erroNaoSelecionado = true;
            }
        }
        
        if(modelo.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Adicione itens à tabela para duplicá-los!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            if(erroNaoSelecionado == false){
                modelo.setRowCount(modelo.getRowCount()+1);
                modelo.setValueAt(modelo.getValueAt(linhaSelecionada,0) , modelo.getRowCount()-1 , 0);
            } else{
                JOptionPane.showMessageDialog(this, "Selecione um item para ser duplicado!", "XtatistiK - Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        tabelaItens.setModel(modelo);
    }//GEN-LAST:event_btDuplicarActionPerformed

    
    public static boolean verifExistencia(ArrayList<String> arrayNomes,String nome){
        for(int i = 0; i<arrayNomes.size(); i++){
            if(arrayNomes.get(i).equals(nome)){
                return true;
            }
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculoModa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculoModa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculoModa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculoModa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculoModa().setVisible(true);
            }
        });

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btCalcular;
    private javax.swing.JButton btDuplicar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable tabelaItens;
    // End of variables declaration//GEN-END:variables
}
